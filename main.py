import asyncio
import datetime
import threading
from concurrent.futures import ThreadPoolExecutor

from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, CallbackQuery
import keyboards as kb
from aiogram.fsm.context import FSMContext
from conf import BOT_API, db_params
from aiogram.filters.command import Command
from db import Database
from states import *
from sheets import AnalyticsSheetUpdater
from test_sheets import GoogleSheetUpdater

from aiogram.filters import CommandStart, CommandObject




bot = Bot(token=BOT_API)
dp = Dispatcher()

# superadmin_id = 1061467560 #Frist
superadmin_id = 684074727 #–ù–∞—Å—Ç—è
async def scheduled_task():
    # await updater.update_sheet()
    print('–ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, —Ç.–∫ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞')

bot = Bot(token=BOT_API)
dp = Dispatcher()
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É scheduled_task() –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    # asyncio.create_task(scheduled_task())
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    await dp.start_polling(bot)



db = Database(db_params)

updater = GoogleSheetUpdater(db_params, 'third-adminbot-export-sheets-135f85f904d3.json', 'Analytics')
########################################################################################################################
@dp.message(F.text == '–í—ã–¥–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É')
async def give_cash(message: Message, state: FSMContext):
    if message.from_user.id == superadmin_id:
        await message.answer('üë§ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É', reply_markup=kb.generate_paginated_buttons(db.get_employ(), 0))
        await state.set_state(GiveMoneyToEmploy.wait_for_employ)

@dp.callback_query(GiveMoneyToEmploy.wait_for_employ, lambda c: c.data and c.data.startswith('page_'))
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[1])
    template_orders = db.get_employ()

    keyboard = kb.generate_paginated_buttons(template_orders, page)

    await bot.edit_message_reply_markup(callback_query.message.chat.id,
                                        callback_query.message.message_id,
                                        reply_markup=keyboard)



@dp.callback_query(GiveMoneyToEmploy.wait_for_employ)
async def prosedd(callback_query: CallbackQuery, state: FSMContext):
    id = int(callback_query.data.split('_')[1])
    cash = db.get_total_salary(id)
    await callback_query.message.answer(f'‚ö†Ô∏è –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤—ã–¥–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É <b>‚Ññ{id}</b> –∑–∞—Ä–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ <b>{cash}‚ÇΩ</b>',reply_markup=kb.generate_verif_buttons(), parse_mode='html')
    await state.update_data(user_id = id)
    await callback_query.answer('')
    await state.set_state(GiveMoneyToEmploy.confirm)

@dp.callback_query(GiveMoneyToEmploy.confirm)
async def prosedd(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    id = data['user_id']
    if callback_query.data == 'yes':
        if db.clear_user_salary(id):
            await callback_query.message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç—É!')
        else:
            await callback_query.message.answer('üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!')
    else:
        await callback_query.message.answer('üö´ –û—Ç–º–µ–Ω–µ–Ω–æ')
    await callback_query.answer('')
    await state.clear()

########################################################################################################################

@dp.message(F.text == '–ò–∑—å—è—Ç–∏–µ –∏–∑ –∫–∞—Å—Å—ã')
async def cashy(message: Message, state: FSMContext):
    if message.from_user.id == superadmin_id:
        cashbox_info = db.get_cashbox_info()
        await message.answer(f'üí∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑—ä—è—Ç—å (–±–µ–∑ –∑–Ω–∞–∫–æ–≤ –∏ —Ç.–¥)\n‚ö†Ô∏è –°–µ–π—á–∞—Å –≤ –∫–∞—Å—Å–µ: <b>{cashbox_info["salary"]}‚ÇΩ</b>', parse_mode='html')
        await state.set_state(TakeYourCash.wait_for_cash)



@dp.message(TakeYourCash.wait_for_cash)
async def persent_check(message: Message, state: FSMContext):
    if message.from_user.id == superadmin_id or db.is_admin(message.from_user.id):
        message_cash = int(message.text)
        salary = db.update_salary(-message_cash)
        if salary is not False:
            await message.answer(f'‚úÖ –ö–∞—Å—Å–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–∞–ª–∏—á–µ–Ω–∞ –Ω–∞ <b>{message_cash}</b>‚ÇΩ\n‚ö†Ô∏è –í –∫–∞—Å—Å–µ –æ—Å—Ç–∞–ª–æ—Å—å: <b>{salary}</b>‚ÇΩ', parse_mode='html')
            await state.clear()
        else:
            await message.answer('‚ùå –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–ø–∏—Å–∞—Ç—å –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥, —á–µ–º –µ—Å—Ç—å')

@dp.message(F.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Å—Å—ã')
async def inventory_employ(message: Message, state: FSMContext):
    if message.from_user.id == superadmin_id or db.is_admin(message.from_user.id):
        cashbox_info = db.get_cashbox_info()
        if cashbox_info:
            response_message = (
                f"üí∞ –¢–µ–∫—É—â–∞—è –∫–∞—Å—Å–∞: <b>{cashbox_info['salary']}‚ÇΩ</b>\n"
                f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä—ã: <b>{cashbox_info['percentage_products']}%</b>\n"
                f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ —É—Å–ª—É–≥–∏: <b>{cashbox_info['percentage_services']}%</b>"
            )
        else:
            response_message = "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Å—Å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        await message.answer(response_message, parse_mode='html')
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@dp.message(F.text == '–§–∏–Ω–∞–Ω—Å—ã')
async def inventory_employ(message: Message, state: FSMContext):
    if message.from_user.id == superadmin_id or db.is_admin(message.from_user.id):
        await message.answer('üìù –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb.admin_finances_kb)

@dp.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ª—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
async def persent_check(message: Message, state: FSMContext):
    if message.from_user.id == superadmin_id or db.is_admin(message.from_user.id):
        await message.answer('üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø',reply_markup=kb.generate())
        await state.set_state(ReworkPercent.wait_for_type)


@dp.callback_query(ReworkPercent.wait_for_type)
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id == superadmin_id or db.is_admin(callback_query.from_user.id):
        await state.update_data(type=callback_query.data)
        await callback_query.message.answer('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã—Ä—É—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ (–≤ —á–∏—Å–ª–∞—Ö, –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –∏ —Ç.–¥)')
        await callback_query.answer('')
        await state.set_state(ReworkPercent.wait_for_message)

@dp.message(ReworkPercent.wait_for_message)
async def persent_check(message: Message, state: FSMContext):
    if message.from_user.id == superadmin_id or db.is_admin(message.from_user.id):
        data = await state.get_data()
        old_per = db.get_percentage(data["type"])
        new_per = int(message.text)
        db.update_cashbox_percentage(percentage_type=data["type"]+'s', new_percentage=new_per)
        msg_txt = f'‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã—Ä—É—á–∫–∏ –∏–∑–º–µ–Ω–µ–Ω: —Å <b>{old_per}%</b> –Ω–∞ <b>{new_per}%</b>'
        await message.answer(text=msg_txt, parse_mode='html')
        await state.clear()
########################################################################################################################
@dp.message(F.text == '–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É')
async def inventory_employ(message: Message, state: FSMContext):
    if message.from_user.id == superadmin_id or db.is_admin(message.from_user.id):
        deliveries = db.get_all_not_paid_deliveries()
        if not deliveries:
            await message.answer('–ù–µ—Ç –Ω–µ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫.')
            return
        await message.answer('üìù –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –ø–æ—Å—Ç–∞–≤–∫—É', reply_markup=kb.generate_paginated_buttons(deliveries, 0))
        await state.set_state(PayDelivery.wait_for_delivery)

@dp.callback_query(PayDelivery.wait_for_delivery, lambda c: c.data and c.data.startswith('page_'))
async def process_callback_page(callback_query: types.CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[1])
    template_orders = db.get_all_not_paid_deliveries()

    keyboard = kb.generate_paginated_buttons(template_orders, page)

    await bot.edit_message_reply_markup(callback_query.message.chat.id,
                                        callback_query.message.message_id,
                                        reply_markup=keyboard)

@dp.callback_query(PayDelivery.wait_for_delivery, lambda c: not c.data.startswith('page_'))
async def process_callback_select(callback_query: types.CallbackQuery, state: FSMContext):
    delivery_id = int(callback_query.data.split('_')[1])
    delivery_info = db.get_delivery_info(delivery_id)

    if delivery_info:
        product_name, quantity, delivery_date, is_paid = delivery_info
        status = "–û–ø–ª–∞—á–µ–Ω–æ" if is_paid else "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
        message_text = f"üì¶ <b>–ü–æ—Å—Ç–∞–≤–∫–∞:</b> {product_name}\n"
        message_text += f"üìÖ <b>–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_date}\n"
        message_text += f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity}\n"
        message_text += f"üí≥ <b>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:</b> {status}\n"

        await callback_query.message.answer(message_text, reply_markup=kb.generate_verif_buttons(), parse_mode='html')
        await callback_query.answer('')
        await state.update_data(delivery_id=delivery_id)
        await state.set_state(PayDelivery.confirm)

@dp.callback_query(PayDelivery.confirm)
async def process_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'yes':
        data = await state.get_data()
        delivery_id = data['delivery_id']
        db.mark_delivery_as_paid(delivery_id)
        await callback_query.message.answer('‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞.')
    else:
        await callback_query.message.answer('‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    await callback_query.answer('')
    await state.clear()


########################################################################################################################
@dp.message(F.text == '–°–∫–ª–∞–¥')
async def inventory_employ(message: Message, state: FSMContext):
    if message.from_user.id == superadmin_id or db.is_admin(message.from_user.id):
        await message.answer('üìù –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb.admin_warehouse_kb)



@dp.message(F.text == '–°–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏')
async def inventory_employ(message: Message, state: FSMContext):
    if message.from_user.id == superadmin_id or db.is_admin(message.from_user.id):
        await message.answer('üìù –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb.generate_inventory_choose())
        await state.set_state(CheckInventory.wait_for_choose)


@dp.callback_query(CheckInventory.wait_for_choose)
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id == superadmin_id or db.is_admin(callback_query.from_user.id):
        choose = callback_query.data  # product | employ | all_product
        await callback_query.answer('')
        if choose == 'employ':
            await callback_query.message.answer('üìù –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
                                                reply_markup=kb.generate_paginated_buttons(
                                                    db.get_users_with_inventory_lite(), 0))
            await state.set_state(CheckInventory.wait_for_people)
        elif choose == 'product':
            await callback_query.message.answer('üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä', reply_markup=kb.generate_paginated_buttons(
                db.get_all_inventory_products_with_warehouse(), 0))
            await state.set_state(CheckInventory.wait_for_product)
        elif choose == 'all_product':
            inventory_summary, deliveries_summary = db.get_inventory_summary()
            message = "üìä <b>–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º:</b>\n"
            for product_name, users in inventory_summary.items():
                total_quantity = sum(quantity for _, quantity in users)
                message += f"\nüì¶ <b>{product_name}</b>\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{total_quantity} —à—Ç.</b>\n–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å—á–µ—Ç—É —É:\n"
                for user_name, quantity in users:
                    message += f"üë§ {user_name} - {quantity} —à—Ç.\n"

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–∞–≤–∫–∞—Ö –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                if product_name in deliveries_summary:
                    message += "\nüì¶ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏:</b>\n"
                    for quantity, delivery_date, is_paid in deliveries_summary[product_name]:
                        status = "–û–ø–ª–∞—á–µ–Ω–æ" if is_paid else "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
                        message += f"üìÖ {delivery_date} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç. ({status})\n"

            await callback_query.message.answer(message, parse_mode='html')
            await state.clear()


########################################################################################################################

@dp.callback_query(CheckInventory.wait_for_people, lambda c: c.data and c.data.startswith('page_'))
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[1])
    template_orders = db.get_users_with_inventory_lite()

    keyboard = kb.generate_paginated_buttons(template_orders, page)

    await bot.edit_message_reply_markup(callback_query.message.chat.id,
                                        callback_query.message.message_id,
                                        reply_markup=keyboard)


@dp.callback_query(CheckInventory.wait_for_people)
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    id = int(callback_query.data.split('_')[1])
    products = db.get_user_available_products_by_useri_id(id)

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ products
    employee_name = products[0][0] if products else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫"

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –∏ –µ–≥–æ —Ç–æ–≤–∞—Ä–∞—Ö
    message_text = f"üë§ <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee_name}</b>\n\n"
    for product in products:
        product_name = product[1]
        product_quantity = product[2]
        give_date = product[3].strftime('%Y-%m-%d') if product[3] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        message_text += f"üì¶ <b>{product_name}</b> - <b>{product_quantity}</b> (–î–∞—Ç–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è: {give_date})\n"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(message_text, parse_mode="HTML")
    await callback_query.answer('')
    await state.clear()


########################################################################################################################

@dp.callback_query(CheckInventory.wait_for_product, lambda c: c.data and c.data.startswith('page_'))
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[1])
    template_orders = db.get_all_inventory_products()

    keyboard = kb.generate_paginated_buttons(template_orders, page)

    await bot.edit_message_reply_markup(callback_query.message.chat.id,
                                        callback_query.message.message_id,
                                        reply_markup=keyboard)




@dp.callback_query(CheckInventory.wait_for_product)
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    product_id = int(callback_query.data.split('_')[1])
    products = db.get_product_owners_and_quantity(product_id)

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ products
    product_name = products[0][2] if products else db.get_product_name_from_warehouse(product_id)

    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    total_quantity = sum(product[1] for product in products)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –Ω–∞ —Å–∫–ª–∞–¥–µ
    try:
        warehouse_quantity = db.get_warehouse_product_quantity(product_id)
    except:
        warehouse_quantity = 0

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏ –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞—Ö
    message_text = f"üì¶ <b>–ü—Ä–æ–¥—É–∫—Ç: {product_name}</b>\n\n"
    for product in products:
        employee_name = product[0]
        product_quantity = product[1]
        give_date = product[3].strftime('%Y-%m-%d') if product[3] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        message_text += f"üë§ <b>{employee_name}</b>: {product_quantity} (–î–∞—Ç–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è: {give_date})\n"

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –æ–±—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    message_text += f"\nüìä <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {total_quantity}"

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
    message_text += f"\n\nüè¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ:</b> {warehouse_quantity}"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –ø–æ—Å—Ç–∞–≤–∫–∞—Ö
    last_deliveries = db.get_last_five_deliveries_by_product_id(product_id)
    if last_deliveries:
        message_text += "\nüì¶ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏:</b>\n"
        for delivery in last_deliveries:
            _, quantity, delivery_date, is_paid = delivery
            status = "–û–ø–ª–∞—á–µ–Ω–æ" if is_paid else "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
            message_text += f"\nüìÖ {delivery_date} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç. ({status})"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(message_text, parse_mode="HTML")
    await callback_query.answer('')
    await state.clear()

########################################################################################################################
@dp.message(F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤')
async def get_stat_admin(message: Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', reply_markup=kb.generate_person_pick())
    await state.set_state(GetStatAdmin.get_type)

# @dp.callback_query(GetStatAdmin.get_time)
# async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
#     if callback_query.from_user.id == superadmin_id or db.is_admin(callback_query.from_user.id):
#         await state.update_data(get_time=callback_query.data)
#         await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',reply_markup=kb.generate_person_pick())
#         await callback_query.answer('')
#         await state.set_state(GetStatAdmin.get_type)


@dp.callback_query(GetStatAdmin.get_type)
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id == superadmin_id or db.is_admin(callback_query.from_user.id):
        await callback_query.answer('')
        if callback_query.data == 'whole_dept':
            time_periods_en = ["day", "week", "month", "alltime"]
            time_periods_ru = {
                "day": "–¥–µ–Ω—å",
                "week": "–Ω–µ–¥–µ–ª—é",
                "month": "–º–µ—Å—è—Ü",
                "alltime": "–≤—Å–µ –≤—Ä–µ–º—è"
            }

            messages = []
            text = 'üìä<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ–≥–æ –æ—Ç–¥–µ–ª–∞</b>'
            messages.append(text)
            for time in time_periods_en:
                time_period = time_periods_ru.get(time, time)
                orders = db.fetch_orders(user_id=callback_query.from_user.id, person='whole_dept', time=time_period)
                order_count = len(orders)
                total_sales = sum(order[3] for order in orders)  # –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
                message = f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {time_period}:</b>\nüí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: <i>{order_count}</i>\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: <i>{total_sales}‚ÇΩ</i>"
                messages.append(message)

            final_message = "\n\n".join(messages)
            await callback_query.message.answer(final_message, parse_mode='html')
            await state.clear()
        else:
            await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', reply_markup=kb.generate_paginated_buttons(db.get_employ(),0))
            await state.set_state(GetStatAdmin.get_people)

@dp.callback_query(GetStatAdmin.get_people, lambda c: c.data and c.data.startswith('page_'))
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[1])
    template_orders = db.get_users()

    keyboard = kb.generate_paginated_buttons(template_orders, page)

    await bot.edit_message_reply_markup(callback_query.message.chat.id,
                                        callback_query.message.message_id,
                                        reply_markup=keyboard)


@dp.callback_query(GetStatAdmin.get_people)
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = int(callback_query.data.split('_')[1])
    time_periods_en = ["day", "week", "month", "alltime"]
    time_periods_ru = {
        "day": "–¥–µ–Ω—å",
        "week": "–Ω–µ–¥–µ–ª—é",
        "month": "–º–µ—Å—è—Ü",
        "alltime": "–≤—Å–µ –≤—Ä–µ–º—è"
    }

    messages = []
    text = f'üìä<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚Ññ{user_id}</b>'
    messages.append(text)
    for time in time_periods_en:
        time_period = time_periods_ru.get(time, time)

        orders = db.fetch_orders(user_id=user_id, person='personal', time=time_period)
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∏ —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂
        order_count = len(orders)
        total_sales = sum(order[3] for order in orders)  # –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Ä—É—á–∫—É –ø–æ –Ω–∞–ª–∏—á–Ω—ã–º –∏ –ø–æ –∫–∞—Ä—Ç–∞–º
        cash_sales, card_sales = db.fetch_sales_by_type(user_id=user_id, time=time_period)

        message = (f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {time_period}:</b>\n"
                   f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: <i>{order_count}</i>\n"
                   f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: <i>{total_sales}‚ÇΩ</i>\n"
                   f"üíµ –í—ã—Ä—É—á–∫–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏: <i>{cash_sales}‚ÇΩ</i>\n"
                   f"üí≥ –í—ã—Ä—É—á–∫–∞ –ø–æ –∫–∞—Ä—Ç–∞–º: <i>{card_sales}‚ÇΩ</i>\n"
                   f"üíµüí≥ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: <i>{cash_sales + card_sales}‚ÇΩ</i>")
        messages.append(message)

    final_message = "\n\n".join(messages)
    await callback_query.answer('')
    await callback_query.message.answer(final_message, parse_mode='html')
    await state.clear()


#########################################################################################################################
@dp.message(Command('cancel'))
async def cancel_command(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")
    else:
        await state.clear()
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")





@dp.message(F.text == '–°—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤')
async def employees_status_command(message: Message):
    employees, online_count, offline_count = db.get_employees_status()

    await message.answer(
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: <i>{online_count}</i> üü¢\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Ñ–ª–∞–π–Ω: <i>{offline_count}</i> üî¥",
        parse_mode='html'
    )

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: —Å–Ω–∞—á–∞–ª–∞ –æ–Ω–ª–∞–π–Ω, –ø–æ—Ç–æ–º –æ—Ñ–ª–∞–π–Ω
    sorted_employees = sorted(employees, key=lambda x: not x[2])

    status_messages = []
    for user_id, real_name, is_online in sorted_employees:
        status = "üü¢" if is_online else "üî¥"
        status_messages.append(f"{status} : {real_name}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    await message.answer("\n".join(status_messages), parse_mode='html')


@dp.message(F.text == '–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å')
async def change_status_command(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = db.get_user(user_id)
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å is_online
    try:
        new_status = db.toggle_online_status(user_id)
        status_text = "–æ–Ω–ª–∞–π–Ω üü¢" if new_status else "–æ—Ñ–ª–∞–π–Ω üî¥"
        await message.answer(f"–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>{status_text}</b>.", parse_mode='html')
        print('–í—ã–∑–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã')
        await scheduled_task()
    except Exception as e:
        await message.answer(f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")




@dp.message(Command('start'))
async def strt_command(message: Message):
    if message.from_user.id == superadmin_id:
        await message.answer('–í—ã –∑–∞—à–ª–∏ –∫–∞–∫ –°—É–ø–µ—Ä–ê–¥–º–∏–Ω ü¶∏‚Äç‚ôÇÔ∏è', reply_markup=kb.superadmin_main_kb)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        print(db.is_admin(message.from_user.id))
        if db.is_admin(message.from_user.id):
            await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üîß', reply_markup=kb.admin_main_kb  )
        else:
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üìù', reply_markup=kb.main_kb)

#######################################################################################################################
# –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(F.text == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã')
async def change_admin(message: Message, state: FSMContext):
    if message.from_user.id == superadmin_id:
        await message.answer('üìù –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel',
                             reply_markup=kb.generate_add_remove_menu('admin'))
        await state.set_state(Choose_pick_add.wait_for_choose)


@dp.callback_query(Choose_pick_add.wait_for_choose)
async def process_user_choice(callback_query: CallbackQuery, state: FSMContext):
    choose = callback_query.data.split('_')[0]
    if choose == 'add':
        if callback_query.from_user.id == superadmin_id:
            await callback_query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤—ã—à–∞–µ–º–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", reply_markup=kb.generate_paginated_buttons(db.get_employ(), 0))
            await state.set_state(AddAdmin.waiting_for_id)
    elif choose == 'remove':
        if callback_query.from_user.id == superadmin_id or db.is_admin(callback_query.from_user.id):
            await callback_query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",reply_markup=kb.generate_paginated_buttons(db.get_admins(), 0))
            await state.set_state(RemoveAdmin.waiting_for_message)
    else:
        await callback_query.message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')

    await callback_query.answer('')

#######################################################################################################################
@dp.callback_query(AddAdmin.waiting_for_id, lambda c: c.data and c.data.startswith('page_'))
async def remove_admin_message(callback_query: CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[1])

    keyboard = kb.generate_paginated_buttons(db.get_employ(), page)

    await bot.edit_message_reply_markup(callback_query.message.chat.id,
                                        callback_query.message.message_id,
                                        reply_markup=keyboard)


@dp.callback_query(AddAdmin.waiting_for_id)
async def add_admin_name(callback_query: CallbackQuery, state: FSMContext):
    user_id = int(callback_query.data.split('_')[1])
    real_name = db.get_user_name(user_id)
    db.make_admin(user_id)
    await callback_query.message.answer(f"üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{real_name}</b> —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º." , parse_mode='html')
    await callback_query.answer('')
    await state.clear()
#####################################################################################################################
# –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.callback_query(RemoveAdmin.waiting_for_message, lambda c: c.data and c.data.startswith('page_'))
async def remove_admin_message(callback_query: CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[1])
    template_orders = db.get_employ()

    keyboard = kb.generate_paginated_buttons(template_orders, page)

    await bot.edit_message_reply_markup(callback_query.message.chat.id,
                                        callback_query.message.message_id,
                                        reply_markup=keyboard)

@dp.callback_query(RemoveAdmin.waiting_for_message)
async def remove_admin_by_id(callback_query: CallbackQuery, state: FSMContext):
    user_id = int(callback_query.data.split('_')[1])
    real_name = db.get_user(user_id)[1]
    db.remove_admin(user_id)
    await callback_query.message.answer(f"üíæ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <b>{real_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", parse_mode='html')
    await callback_query.answer('')
    await state.clear()
########################################################################################################################
# –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è \ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@dp.message(F.text == '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏')
async def add_employee_command(message: Message, state: FSMContext):
    if message.from_user.id == superadmin_id or db.is_admin(message.from_user.id):
        await message.answer('üìù –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb.admin_employ_kb)

@dp.message(F.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤')
async def add_employee_command(message: Message, state: FSMContext):
    if message.from_user.id == superadmin_id or db.is_admin(message.from_user.id):
        await message.answer('üìù –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel', reply_markup=kb.generate_add_remove_menu('employ'))
        await state.set_state(Choose_pick_add_emp.wait_for_choose)

@dp.callback_query(Choose_pick_add_emp.wait_for_choose)
async def process_user_choice(callback_query: CallbackQuery, state: FSMContext):
    choose = callback_query.data.split('_')[0]
    if choose == 'add':
        if callback_query.from_user.id == superadmin_id or db.is_admin(callback_query.from_user.id):
            await callback_query.message.answer(
                "‚Ü™Ô∏è –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ ID. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
            await state.set_state(AddEmployee.waiting_for_message)
    elif choose == 'remove':
        if callback_query.from_user.id == superadmin_id or db.is_admin(callback_query.from_user.id):
            await callback_query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–∞–ª—è–µ–º–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", reply_markup=kb.generate_paginated_buttons(db.get_employ(), 0))
            await state.set_state(RemoveEmployee.waiting_for_message)
    else:
        await callback_query.message.answer('üö´ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')

    await callback_query.answer('')

#####################################################################################################################
# –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

@dp.message(AddEmployee.waiting_for_message)
async def add_employee_message(message: Message, state: FSMContext):
    if message.forward_from:
        user_id = message.forward_from.id
        await state.update_data(user_id=user_id)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
        await state.set_state(AddEmployee.waiting_for_name)
    else:
        await message.answer("üö´ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
        await state.set_state(AddEmployee.waiting_for_id)

@dp.message(AddEmployee.waiting_for_id)
async def add_employee_by_id(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        await message.answer("‚Ü™Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
        await state.set_state(AddEmployee.waiting_for_name)
    except ValueError:
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")

@dp.message(AddEmployee.waiting_for_name)
async def add_employee_name(message: Message, state: FSMContext):
    real_name = message.text
    user_data = await state.get_data()
    user_id = user_data['user_id']
    if db.add_user(user_id, real_name, False, False, False):
        await message.answer(f"üíæ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ <b>{real_name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω." , parse_mode='html')
    else:
        await message.answer('üö´ –û—à–∏–±–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω')
    await state.clear()
########################################################################################################################
# –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@dp.callback_query(RemoveEmployee.waiting_for_message,lambda c: c.data and c.data.startswith('page_'))
async def process_callback_page(callback_query: types.CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[1])
    template_orders = db.get_employ()

    keyboard = kb.generate_paginated_buttons(template_orders, page)

    await bot.edit_message_reply_markup(callback_query.message.chat.id,
                                        callback_query.message.message_id,
                                        reply_markup=keyboard)

@dp.callback_query(RemoveEmployee.waiting_for_message)
async def remove_employee_message(callback_query: types.CallbackQuery, state: FSMContext):

    user_id = int(callback_query.data.split('_')[1])
    real_name = db.get_user(user_id)[1]
    db.remove_user(user_id)
    await callback_query.message.answer(f"üíæ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ <b>{real_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω." , parse_mode='html')
    await callback_query.answer('')
    await state.clear()

########################################################################################################################
@dp.message(F.text == '–ó–∞–±—Ä–∞—Ç—å –Ω–∞ —Å–∫–ª–∞–¥')
async def remove_inventory_command(message: Message, state: FSMContext):
    if message.from_user.id == superadmin_id or db.is_admin(message.from_user.id):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        keyboard = kb.generate_paginated_buttons(db.get_users_with_inventory_lite(), 0)
        await message.answer("‚Ü™Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=keyboard)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        await state.set_state(RemoveInventory.wait_for_people)

@dp.callback_query(RemoveInventory.wait_for_people,lambda c: c.data and c.data.startswith('page_'))
async def process_callback_page(callback_query: types.CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[1])
    type = await state.get_data()
    user_id = type["wait_for_people"]
    template_orders = db.get_user_available_products_by_useri_id(user_id)

    keyboard = kb.generate_paginated_buttons(template_orders, page)

    await bot.edit_message_reply_markup(callback_query.message.chat.id,
                                        callback_query.message.message_id,
                                        reply_markup=keyboard)



@dp.callback_query(RemoveInventory.wait_for_people)
async def process_user_choice(callback_query: CallbackQuery, state: FSMContext):
    user_id = int(callback_query.data.split('_')[1])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(wait_for_people=user_id)
    await callback_query.answer('')
    await callback_query.message.answer('üìù –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç', reply_markup=kb.generate_products_keyboard_inventory(db.get_user_inventory(user_id)))
    await state.set_state(RemoveInventory.wait_for_product)



@dp.callback_query(RemoveInventory.wait_for_product)
async def process_user_choice(callback_query: CallbackQuery, state: FSMContext):
    product_id = callback_query.data.split('_')[1]
    await state.update_data(wait_for_product=product_id)
    data = await state.get_data()
    user = db.get_user_by_id(data["wait_for_people"])
    product = db.get_product_name_by_id(product_id)
    message = f'–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∏–∑—ä—è—Ç—å –ø—Ä–æ–¥—É–∫—Ç <b>{product}</b> —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ <b>{user[1]}</b>'
    await callback_query.answer()
    await callback_query.message.answer(message, reply_markup=kb.generate_verif_buttons(), parse_mode='html')
    await state.set_state(RemoveInventory.confirm)

@dp.callback_query(RemoveInventory.confirm)
async def process_user_choice(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data["wait_for_people"]
    product_id = data["wait_for_product"]

    if callback_query.data == 'yes':
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        quantity = db.get_user_product_quantity(user_id, product_id)
        if quantity <= 0:
            db.delete_inventory_row(user_id, product_id)
            await callback_query.message.answer('–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢–∞–∫ –∫–∞–∫ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–≤–Ω—è–ª–æ—Å—å –∏–ª–∏ –±—ã–ª–æ –Ω–∏–∂–µ –Ω—É–ª—è, –Ω–∞ —Å–∫–ª–∞–¥ –æ–Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–æ—Å—å')
            await callback_query.answer('')
            return
        else:
            # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if db.delete_inventory_row(user_id, product_id):
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥
                db.add_to_warehouse(product_id, quantity)
                await callback_query.message.answer(f'–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å ({quantity} —à—Ç.) –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥.')
            else:
                await callback_query.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.')
    else:
        await callback_query.message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ')

    await callback_query.answer('')
    await state.clear()
########################################################################################################################
@dp.message(F.text == '–ù–∞—á–∏—Å–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ —Å–∫–ª–∞–¥')
async def add_inventory_command(message: Message, state: FSMContext):
    await message.answer("‚Ü™Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞:", reply_markup=kb.generate())
    await state.set_state(AddWarehouse.choose_type)

@dp.callback_query(AddWarehouse.choose_type)
async def process_user_choice(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    products = db.fetch_template_orders(callback_query.data)
    await state.update_data(choose_type=callback_query.data)
    if not products:
        await callback_query.answer('')
        await callback_query.answer("üö´ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    await callback_query.answer('')
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–æ–≤–∞—Ä–∞
    keyboard = kb.generate_paginated_buttons(products, 0)
    await callback_query.message.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:", reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
    await state.set_state(AddWarehouse.choose_product)

@dp.callback_query(AddWarehouse.choose_product, lambda c: c.data and c.data.startswith('page_'))
async def process_callback_page(callback_query: types.CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[1])
    type = await state.get_data()
    type = type["choose_type"]
    template_orders = db.fetch_template_orders(type)

    keyboard = kb.generate_paginated_buttons(template_orders, page)

    await bot.edit_message_reply_markup(callback_query.message.chat.id,
                                        callback_query.message.message_id,
                                        reply_markup=keyboard)

@dp.callback_query(AddWarehouse.choose_product)
async def process_product_choice(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–æ–≤–∞—Ä–∞
    product_id = int(callback_query.data.split('_')[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(chosen_product_id=product_id)
    await callback_query.answer('')
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    await callback_query.message.answer("üõí –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    await state.set_state(AddWarehouse.enter_quantity)

@dp.message(AddWarehouse.enter_quantity)
async def process_quantity_input(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    quantity = int(message.text)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_id = data['chosen_product_id']

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥
    db.add_warehouse_inventory(product_id, quantity)
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç–∞–≤–∫—É
    db.add_delivery(product_id, quantity)

    await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥.")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
###############################################################################################################################
@dp.message(F.text == '–í—ã–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç')
async def add_inventory_command(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    users = db.get_employ()
    if not users:
        await message.answer("üö´ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    keyboard = kb.generate_paginated_buttons(users, 0)
    await message.answer("‚Ü™Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    await state.set_state(AddInventory.choose_user)

@dp.callback_query(AddInventory.choose_user,lambda c: c.data and c.data.startswith('page_'))
async def process_callback_page(callback_query: types.CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[1])
    template_orders = db.get_employ()

    keyboard = kb.generate_paginated_buttons(template_orders, page)

    await bot.edit_message_reply_markup(callback_query.message.chat.id,
                                        callback_query.message.message_id,
                                        reply_markup=keyboard)


@dp.callback_query(AddInventory.choose_user)
async def process_user_choice(callback_query: CallbackQuery, state: FSMContext):
    user_id = int(callback_query.data.split('_')[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(chosen_user_id=user_id)
    await callback_query.answer('')
    await callback_query.message.answer('üìù –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç', reply_markup=kb.generate())
    await state.set_state(AddInventory.choose_type)



@dp.callback_query(AddInventory.choose_type)
async def process_user_choice(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    products = db.fetch_template_orders(callback_query.data)
    await state.update_data(choose_type=callback_query.data)
    if not products:
        await callback_query.answer('')
        await callback_query.answer("üö´ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    await callback_query.answer('')
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–æ–≤–∞—Ä–∞
    keyboard = kb.generate_paginated_buttons(products, 0)
    await callback_query.message.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:", reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
    await state.set_state(AddInventory.choose_product)

@dp.callback_query(AddInventory.choose_product,lambda c: c.data and c.data.startswith('page_'))
async def process_callback_page(callback_query: types.CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[1])
    type = await state.get_data()
    type = type["choose_type"]
    template_orders = db.fetch_template_orders(type)

    keyboard = kb.generate_paginated_buttons(template_orders, page)

    await bot.edit_message_reply_markup(callback_query.message.chat.id,
                                        callback_query.message.message_id,
                                        reply_markup=keyboard)

@dp.callback_query(AddInventory.choose_product)
async def process_product_choice(callback_query: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–æ–≤–∞—Ä–∞
    product_id = int(callback_query.data.split('_')[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(chosen_product_id=product_id)
    await callback_query.answer('')
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    await callback_query.message.answer("üõí –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    await state.set_state(AddInventory.enter_quantity)


@dp.message(AddInventory.enter_quantity)
async def process_quantity_input(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    quantity = int(message.text)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    user_id = data['chosen_user_id']
    product_id = data['chosen_product_id']

    try:
        warehouse_quantity = db.get_warehouse_product_quantity(product_id)
    except:
        warehouse_quantity = 0
    if warehouse_quantity >= quantity:
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –≤—ã–¥–∞–µ–º –µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
        db.add_inventory(user_id, product_id, quantity)
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
        db.reduce_warehouse_quantity(product_id, quantity)
        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É.")
    else:
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ "–∏–∑ –≤–æ–∑–¥—É—Ö–∞"
        db.add_inventory(user_id, product_id, quantity)
        # –£–±–∏—Ä–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–∑ —Å–∫–ª–∞–¥–∞
        db.delete_row_from_warehouse_by_product_id(product_id)
        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É.")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


#####################################################################################################################

@dp.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É')
async def add_order(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –∏ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –æ–Ω
    user_id = message.from_user.id
    user = db.get_user(user_id)
    # print(user)
    if user and (user[5] is True or user[5] is None):
        await message.answer('üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–µ–∫–∞', reply_markup=kb.generate())
        await state.set_state(Add_order.pick_last)
    else:
        await message.answer('üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.')


@dp.callback_query(Add_order.pick_last)
async def generate_button_pick_command (callback:CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.update_data(pick_last=callback.data)
    if db.get_user_available_products(callback.data, callback.from_user.id):
        await callback.message.answer('üìù –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç', reply_markup=kb.generate_paginated_buttons(db.get_user_available_products(callback.data, callback.from_user.id), 0))
        await state.set_state(Add_order.pick_from_templates)
    else:
        await callback.message.answer('‚ùå –£ –í–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤\—É—Å–ª—É–≥')
        await state.clear()


@dp.callback_query(Add_order.pick_from_templates,lambda c: c.data and c.data.startswith('page_'))
async def process_callback_page(callback_query: types.CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[1])
    type = await state.get_data()
    type = type["pick_last"]
    template_orders = db.fetch_template_orders(type)

    keyboard = kb.generate_paginated_buttons(template_orders, page)

    await bot.edit_message_reply_markup(callback_query.message.chat.id,
                                        callback_query.message.message_id,
                                        reply_markup=keyboard)


@dp.callback_query(Add_order.pick_from_templates)
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    template_id = int(callback_query.data.split('_')[1])
    template = db.fetch_template_order_by_id(template_id)
    # print(template)
    await callback_query.answer('')
    type_of_template = template[1]
    if type_of_template == 'service':
        type_of_template = '–£—Å–ª—É–≥–∞'
    elif type_of_template == 'product':
        type_of_template = '–¢–æ–≤–∞—Ä'
    await callback_query.message.answer(f'‚úÖ–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø <b><i>{type_of_template}</i></b>\n<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {template[2]}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ: </b>{template[3]}\nüßæ–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É (–±–µ–∑ –∑–Ω–∞–∫–æ–≤ –∏ –∑–∞–ø—è—Ç—ã—Ö):', parse_mode='html')
    await state.update_data(pick_from_templates=[type_of_template, template])
    await state.set_state(Add_order.get_cost)




@dp.message(Add_order.get_cost)
async def process_cost(message: Message, state: FSMContext):
    await message.answer('üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã', reply_markup=kb.generate_payment_kb())
    await state.update_data(get_cost=message.text)
    await state.set_state(Add_order.get_payment_type)

@dp.callback_query(Add_order.get_payment_type)
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cost = data["get_cost"]
    data = data["pick_from_templates"]
    print(data)
    type_of_payment_rus = ''
    if callback_query.data == 'card':
        type_of_payment_rus = '–∫–∞—Ä—Ç–∞'
    elif callback_query.data == 'cash':
        type_of_payment_rus = '–Ω–∞–ª–∏—á–Ω—ã–µ'
    # print(data[0], data[1])
    await callback_query.answer('')
    await callback_query.message.answer(
        f'‚úÖ–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø <b><i>{data[0]}</i></b>\nüìù<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {data[1][2]}\nüìù<b>–û–ø–∏—Å–∞–Ω–∏–µ: </b>{data[1][3]}\nüßæ<b>–¶–µ–Ω–∞: </b>{cost}\n<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {type_of_payment_rus}',
        parse_mode='html', reply_markup=kb.generate_verif_buttons())
    await state.update_data(payment_type = callback_query.data)
    await state.set_state(Add_order.verify)

@dp.callback_query(Add_order.verify)
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    data_template, cost, payment_type = data["pick_from_templates"], data["get_cost"], data["payment_type"]
    if callback_query.data == 'yes':

        # –ü–æ–ª—É—á–∞–µ–º product_id –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ template_orders
        product_name = data_template[1][2]
        product_id = db.get_product_id_by_name(product_name)
        # print(product_id)
        # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å product_id
        if product_id:
            # –í—ã—á–∏—Ç–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ quantity –≤ —Ç–∞–±–ª–∏—Ü–µ inventory
            db.subtract_inventory(callback_query.from_user.id, product_id,
                                  1)  # –ó–∞–º–µ–Ω–∏—Ç–µ user_id –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            await callback_query.answer('')
            await callback_query.message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —á–µ–∫!')
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–µ–∫–∞
            admins = db.get_admins()
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.add_order(name=data_template[1][2], about=data_template[1][3], cost=int(cost),
                         who_added=callback_query.from_user.id, who_added_name=db.get_user_name(callback_query.from_user.id))

            print('–í—ã–∑–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã')
            await scheduled_task()
            product_type = db.get_product_type(product_id)
            salary_percent = db.get_percentage(product_type)
            print(salary_percent)
            if product_type == 'product':
                db.upsert_salary(user_id=callback_query.from_user.id,
                                 sell_type=payment_type,
                                 new_salary_product=int(cost) * (int(salary_percent) / 100))
            elif product_type == 'service':
                db.upsert_salary(user_id=callback_query.from_user.id,
                                 sell_type=payment_type,
                                 new_salary_service=int(cost) * (int(salary_percent) / 100))

            print(f'–ü—Ä–æ—Ü–µ–Ω—Ç –≤ –∫–∞—Å—Å—É: {1 - (int(salary_percent) / 100)}')
            db.update_salary(salary_change=int(cost) * (1 - (int(salary_percent) / 100)))
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤—ã—Ä—É—á–∫—É –∑–∞ –¥–µ–Ω—å
            orders = db.fetch_orders(user_id=callback_query.from_user.id, person='whole_depr', time='–¥–µ–Ω—å')
            cashbox = db.get_salary()
            order_count = len(orders)
            total_sales = sum(order[3] for order in orders)  # –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
            sales_message = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å:</b>\nüìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: <i>{order_count}</i>\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: <i>{total_sales}‚ÇΩ</i>\nüí∞ –í –∫–∞—Å—Å–µ: <i>{cashbox}‚ÇΩ</i>"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            for admin_id in admins:
                try:
                    await bot.send_message(
                        admin_id[0],
                        f'üßæ<b>–ß–µ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä:</b> {data_template[1][2]}\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <i>{int(cost)}‚ÇΩ</i>\n<b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> <i>{db.get_user_name(callback_query.from_user.id)}</i>\n\n{sales_message}',
                        parse_mode='html'
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id[0]}: {e}")
                    # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Sheets –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            await state.clear()
        else:
            await callback_query.answer('')
            await callback_query.message.answer('‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
            await state.clear()

    elif callback_query.data == 'no':
        await callback_query.answer('')
        await callback_query.message.answer('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
        await state.clear()


######################################################################################################################

@dp.message(F.text == '–°–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª')
async def add_order(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –∏ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –æ–Ω
    user_id = message.from_user.id
    user = db.get_user(user_id)
    if user and (user[5] is True or user[5] is None):
        await message.answer('üìù –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫', reply_markup=kb.generate_time_delation())
        await state.set_state(Get_stat.get_time)
    else:
        await message.answer('üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.')


@dp.callback_query(Get_stat.get_time)
async def process_callback_page(callback_query: types.CallbackQuery, state: FSMContext):
    time = callback_query.data.split('_')[1]
    print(time)
    keyboard = kb.generate_person_pick()

    await bot.edit_message_reply_markup(callback_query.message.chat.id,
                                        callback_query.message.message_id,
                                        reply_markup=keyboard)
    await state.update_data(get_time=time)
    await state.set_state(Get_stat.get_person)


@dp.callback_query(Get_stat.get_person)
async def process_callback_page(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    time_period_en = data["get_time"]
    time_period_ru = {
        "day": "–¥–µ–Ω—å",
        "week": "–Ω–µ–¥–µ–ª—é",
        "month": "–º–µ—Å—è—Ü",
        "alltime": "–≤—Å–µ –≤—Ä–µ–º—è"
    }
    time_period = time_period_ru.get(time_period_en, time_period_en)
    person_type = callback_query.data

    if person_type == "personal":
        orders = db.fetch_orders(user_id=callback_query.from_user.id, person=person_type, time=time_period)
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∏ —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂
        order_count = len(orders)
        total_sales = sum(order[3] for order in orders)  # –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Ä—É—á–∫—É –ø–æ –Ω–∞–ª–∏—á–Ω—ã–º –∏ –ø–æ –∫–∞—Ä—Ç–∞–º
        cash_sales, card_sales = db.fetch_sales_by_type(user_id=callback_query.from_user.id, time=time_period)

        message = (f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {time_period}:</b>\n"
                   f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: <i>{order_count}</i>\n"
                   f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: <i>{total_sales}‚ÇΩ</i>\n"
                   f"üíµ –í—ã—Ä—É—á–∫–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏: <i>{cash_sales}‚ÇΩ</i>\n"
                   f"üí≥ –í—ã—Ä—É—á–∫–∞ –ø–æ –∫–∞—Ä—Ç–∞–º: <i>{card_sales}‚ÇΩ</i>\n"
                   f"üíµüí≥ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: <i>{cash_sales + card_sales}‚ÇΩ</i>")
    else:  # –î–ª—è —Ä–µ–∂–∏–º–∞ "whole_depr"
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∏ —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        orders = db.fetch_orders(user_id=None, person=person_type, time=time_period)
        order_count = len(orders)
        total_sales = sum(order[3] for order in orders)  # –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Ä—É—á–∫—É –ø–æ –Ω–∞–ª–∏—á–Ω—ã–º –∏ –ø–æ –∫–∞—Ä—Ç–∞–º
        cash_sales, card_sales = db.fetch_sales_by_type(user_id=None, time=time_period)

        message = (f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ {time_period}:</b>\n"
                   f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: <i>{order_count}</i>\n"
                   f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: <i>{total_sales}‚ÇΩ</i>\n"
                   f"üíµ –í—ã—Ä—É—á–∫–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏: <i>{cash_sales}‚ÇΩ</i>\n"
                   f"üí≥ –í—ã—Ä—É—á–∫–∞ –ø–æ –∫–∞—Ä—Ç–∞–º: <i>{card_sales}‚ÇΩ</i>\n"
                   f"üíµüí≥ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: <i>{cash_sales + card_sales}‚ÇΩ</i>")

    await callback_query.answer('')
    await callback_query.message.answer(message, parse_mode='html')


########################################################################################################################
@dp.message(F.text == '–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
async def reset_statistics_command(message: Message, state: FSMContext):
    if message.from_user.id == superadmin_id:
        await message.answer("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É? ‚ö†Ô∏è", reply_markup=kb.generate_verif_buttons())
        await state.set_state(ResetStatistics.waiting_for_confirmation)
    else:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@dp.callback_query(ResetStatistics.waiting_for_confirmation)
async def confirm_reset_statistics(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'yes':
        db.reset_statistics()
        await call.message.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞.")
    elif call.data == 'no':
        await call.message.answer("üö´ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.")
    await state.clear()
    await call.answer()

########################################################################################################################
#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ \ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message(F.text == '–¢–æ–≤–∞—Ä—ã/—É—Å–ª—É–≥–∏')
async def product_command(message: Message, state: FSMContext):
    if message.from_user.id == superadmin_id or db.is_admin(message.from_user.id):
        await message.answer('üìù –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb.generate_add_remove_menu('product'))
        await state.set_state(ManageProducts.choose_action)

@dp.callback_query(ManageProducts.choose_action)
async def choose_action_manage_products(callback_query: types.CallbackQuery, state: FSMContext):
    choose = callback_query.data.split('_')[0]
    if choose == 'add':
        await callback_query.message.answer('üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞',reply_markup=kb.generate())
        await state.update_data(choose_action=choose)
        await state.set_state(ManageProducts.choose_type)
    elif choose == 'remove':
        await callback_query.message.answer('üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞',reply_markup=kb.generate())
        await state.update_data(choose_action=choose)
        await state.set_state(ManageProducts.choose_type)
    else:
        await callback_query.message.answer('‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')

    await callback_query.answer('')


@dp.callback_query(ManageProducts.choose_type)
async def choose_type_manage_products(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer('')
    await state.update_data(choose_type=callback_query.data)
    data = await state.get_data()
    choose_action = data['choose_action']
    if choose_action == 'add':
        await callback_query.message.answer('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
        await state.set_state(ManageProducts.enter_product_name)
    elif choose_action == 'remove':
        await callback_query.message.answer('üìù –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç', reply_markup=kb.generate_paginated_buttons(db.fetch_template_orders(callback_query.data), 0))
        await state.set_state(DeleteProducts.wait_for_product_id)

@dp.message(ManageProducts.enter_product_name)
async def enter_name_manage_products(message: Message, state: FSMContext):
    product_name = message.text
    await state.update_data(enter_product_name=product_name)
    await message.answer('üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
    await state.set_state(ManageProducts.enter_product_about)

@dp.message(ManageProducts.enter_product_about)
async def enter_about_manage_products(message: Message, state: FSMContext):
    product_about = message.text
    await state.update_data(enter_product_about=product_about)
    data = await state.get_data()
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞', parse_mode='html')
    await state.set_state(ManageProducts.enter_product_quantity)

@dp.message(ManageProducts.enter_product_quantity)
async def enter_about_manage_products(message: Message, state: FSMContext):
    quantity = message.text
    await state.update_data(quantity=quantity)
    data = await state.get_data()
    await message.answer(f'‚ûï <b>–í—ã —Å–æ–±–∏—Ä–∞—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç:</b>\nüìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data["enter_product_name"]}\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ: </b>{data["enter_product_about"]}', reply_markup=kb.generate_verif_buttons() , parse_mode='html')
    await state.set_state(ManageProducts.confirm)


@dp.callback_query(ManageProducts.confirm)
async def confirm_manage_products(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer('')
    data = await state.get_data()
    if callback_query.data == 'yes':
        product_id = db.add_template_order(order_type=data["choose_type"], name=data["enter_product_name"], about=data["enter_product_about"])
        db.add_to_warehouse(product_id, data["quantity"])
        await callback_query.answer()
        await callback_query.message.answer('‚úÖ –ü—Ä–æ–¥—É–∫—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')

    await state.clear()

@dp.callback_query(DeleteProducts.wait_for_product_id,lambda c: c.data and c.data.startswith('page_'))
async def process_callback_page(callback_query: types.CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[1])
    type = await state.get_data()
    type = type["choose_type"]
    template_orders = db.fetch_template_orders(type)
    keyboard = kb.generate_paginated_buttons(template_orders, page)

    await bot.edit_message_reply_markup(callback_query.message.chat.id,
                                        callback_query.message.message_id,
                                        reply_markup=keyboard)


@dp.callback_query(DeleteProducts.wait_for_product_id)
async def id_delete_products(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer('')
    product_id = callback_query.data.split('_')[1]
    template = db.fetch_template_order_by_id(product_id)
    await state.update_data(wait_for_product_id=product_id)
    await callback_query.message.answer(f'‚ö†Ô∏è –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä\nüìù –ù–∞–∑–≤–∞–Ω–∏–µ: {template[2]}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {template[3]}', reply_markup=kb.generate_verif_buttons() , parse_mode='html')
    await state.set_state(DeleteProducts.confirm)



@dp.callback_query(DeleteProducts.confirm)
async def id_delete_products(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer('')
    data = await state.get_data()
    id = data["wait_for_product_id"]
    if callback_query.data == 'yes':
        if db.remove_template_order(int(id)):
            await callback_query.message.answer('‚úÖ –¢–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª–µ–Ω!')
        else:
            await callback_query.message.answer('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–∞—á–∏—Å–ª–µ–Ω –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
    else:
        await callback_query.message.answer('üö´ –û—Ç–º–µ–Ω–µ–Ω–æ')
    await state.clear()

######################################################################################################################
if __name__ == '__main__':
    asyncio.run(main())

